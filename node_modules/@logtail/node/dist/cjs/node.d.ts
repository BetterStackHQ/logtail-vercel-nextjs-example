/// <reference types="node" />
import { Duplex, Writable } from "stream";
import { ILogtailLog, Context, ILogtailOptions, LogLevel } from "@logtail/types";
import { Base } from "@logtail/core";
export declare class Node extends Base {
    /**
     * Readable/Duplex stream where JSON stringified logs of type `ILogtailLog`
     * will be pushed after syncing
     */
    private _writeStream?;
    constructor(sourceToken: string, options?: Partial<ILogtailOptions>);
    /**
     * Override `Base` log to enable Node.js streaming
     *
     * @param message: string - Log message
     * @param level (LogLevel) - Level to log at (debug|info|warn|error)
     * @param log: (Partial<ILogtailLog>) - Initial log (optional)
     * @returns Promise<ILogtailLog> after syncing
     */
    log<TContext extends Context>(message: string, level?: LogLevel, context?: TContext): Promise<ILogtailLog & TContext>;
    /**
     * Pipe JSON stringified `ILogtailLog` to a stream after syncing
     *
     * @param stream - Writable|Duplex stream
     */
    pipe(stream: Writable | Duplex): Writable | Duplex;
    private encodeAsMsgpack;
}
