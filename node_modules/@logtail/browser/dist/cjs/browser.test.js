"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const tools_1 = require("@logtail/tools");
const browser_1 = require("./browser");
/**
 * Create a log with a random string / current date
 */
function getRandomLog(message) {
    return {
        message
    };
}
// set new property btoa in node environment to run the tests
global.btoa = tools_1.base64Encode;
describe("browser tests", () => {
    // Awaiting: https://bugs.chromium.org/p/chromium/issues/detail?id=571722
    // it("should set a User-Agent based on the right version number", () => {
    //   const expectedValue = `logtail-js(browser)/${version}`;
    //   const actualValue = getUserAgent();
    //   expect(actualValue).toEqual(expectedValue);
    // });
    it("should echo log if logtail sends 20x status code", async (done) => {
        nock_1.default("https://in.logtail.com").post('/').reply(201);
        const message = String(Math.random());
        const expectedLog = getRandomLog(message);
        const browser = new browser_1.Browser("valid source token");
        const echoedLog = await browser.log(message);
        expect(echoedLog.message).toEqual(expectedLog.message);
        done();
    });
    it("should throw error if logtail sends non 200 status code", async (done) => {
        nock_1.default("https://in.logtail.com").post('/').reply(401);
        const browser = new browser_1.Browser("invalid source token");
        const message = String(Math.random);
        await expect(browser.log(message)).rejects.toThrow();
        done();
    });
});
//# sourceMappingURL=browser.test.js.map